def paczkipodzial(wagi, maks_waga):
    kursy = []
    obecny_kurs = []
    obecna_waga = 0

    for waga in wagi:
        if obecna_waga + waga <= maks_waga:
            obecny_kurs.append(waga)
            obecna_waga += waga
        else:
            kursy.append(obecny_kurs)
            obecny_kurs = [waga]
            obecna_waga = waga

    if obecny_kurs:
        kursy.append(obecny_kurs)

    return len(kursy), kursy

wagi = [10, 20, 30, 40, 50, 15]
maks_waga = 50
liczba_kursow, kursy = paczkipodzial(wagi, maks_waga)
print("Minimalna liczba kursów:", liczba_kursow)
print("Kursy:", kursy)








def bfs(graf, start, cel):
    from collections import deque

    kolejka = deque([(start, [start])])
    odwiedzone = []

    while kolejka:
        wierzcholek, sciezka = kolejka.popleft()
        if wierzcholek not in odwiedzone:
            odwiedzone.append(wierzcholek)
            for sasiad in graf[wierzcholek]:
                nowa_sciezka = sciezka + [sasiad]
                if sasiad == cel:
                    return nowa_sciezka
                kolejka.append((sasiad, nowa_sciezka))

    return []
graf = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}
start, cel = 'A', 'F'
najkrotsza_sciezka = bfs(graf, start, cel)
print("Najkrótsza ścieżka:", najkrotsza_sciezka)




def optymalizacjaproceduralna(zadania):
    zadania.sort(key=lambda x: x[0])
    calkowity_czas = 0
    czas_oczekiwania = 0

    for czas, nagroda in zadania:
        calkowity_czas += czas
        czas_oczekiwania += calkowity_czas

    return zadania, czas_oczekiwania

def optymalizacjafunkcyjna(zadania):
    posortowane = sorted(zadania, key=lambda x: x[0])
    czas_oczekiwania = sum((i + 1) * zadanie[0] for i, zadanie in enumerate(posortowane))
    return posortowane, czas_oczekiwania

zadania = [(3, 10), (2, 5), (1, 2)]
opt_kolejnosc, czas = optymalizacjaproceduralna(zadania)
print("Kolejność zadań (proceduralnie):", opt_kolejnosc)
print("Czas oczekiwania:", czas)

opt_kolejnosc, czas = optymalizacjafunkcyjna(zadania)
print("Kolejność zadań (funkcyjnie):", opt_kolejnosc)
print("Czas oczekiwania:", czas)



def plecak(przedmioty, pojemnosc):
    n = len(przedmioty)
    dp = [[0 for _ in range(pojemnosc + 1)] for _ in range(n + 1)]

    for i in range(1, n + 1):
        waga, wartosc = przedmioty[i - 1]
        for j in range(pojemnosc + 1):
            if waga <= j:
                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - waga] + wartosc)
            else:
                dp[i][j] = dp[i - 1][j]

    wynik = []
    w = pojemnosc
    for i in range(n, 0, -1):
        if dp[i][w] != dp[i - 1][w]:
            wynik.append(przedmioty[i - 1])
            w -= przedmioty[i - 1][0]

    return dp[n][pojemnosc], wynik

przedmioty = [(2, 3), (1, 2), (3, 4), (2, 2)]
pojemnosc = 5
maks_wartosc, wybrane = plecak(przedmioty, pojemnosc)
print("Maksymalna wartość (proceduralnie):", maks_wartosc)
print("Wybrane przedmioty:", wybrane)
